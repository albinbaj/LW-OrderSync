<?php

namespace LW\OrderSync\Test\Unit\Service;

use GuzzleHttp\Client;
use GuzzleHttp\ClientFactory;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\ResponseFactory;
use LW\OrderSync\Service\ERPApiService;
use LW\OrderSync\Test\Unit\Model\OrderDataConsumerTest;
use Magento\Store\Model\Store;
use Magento\Store\Model\StoreManagerInterface;
use PHPUnit\Framework\TestCase;

class ERPApiServiceTest extends TestCase
{
    /**
     * API request URL
     */
    const API_REQUEST_URI = 'https://testurl/test/index/';

    /**
     * API request endpoint
     */
    const API_REQUEST_ENDPOINT = '';

    /**
     * @var ResponseFactory
     */
    private $responseFactory;

    /**
     * @var ClientFactory
     */
    private $clientFactory;
    /**
     * @var ERPApiService
     */
    private $erpApiService;
    /**
     * @var StoreManagerInterface|\PHPUnit\Framework\MockObject\MockObject
     */
    private $storeManager;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->clientFactory = $this->createPartialMock(ClientFactory::class, ['create']);

        $this->responseFactory = $this->createPartialMock(ResponseFactory::class, ['create']);

        $this->storeManager = $this->createPartialMock(StoreManagerInterface::class, []);

        $this->erpApiService = new ERPApiService(
            $this->clientFactory,
            $this->responseFactory,
            $this->storeManager,
        );
    }

    /**
     * @param string $uriEndpoint
     * @param array $params
     * @param string $requestMethod
     *
     * @dataProvider requestInvalidArgumentsDataProvider
     */
    public function testExecuteSuccessRequest(
        int $statusCode,
        string $uriEndpoint,
        array $params
    ) {
        $store = $this->getMockBuilder(Store::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->storeManager->expects($this->any())
            ->method('getStore')
            ->willReturn($store);

        $store->expects($this->any())
            ->method('getBaseUrl')
            ->willReturn(self::API_REQUEST_URI);

        $client = $this->getMockBuilder(Client::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs(
                ['config' => [
                    'base_uri' => $store->getBaseUrl()
                ]]
            )
            ->getMock();

        $response = $this->getMockBuilder(Response::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs(
                ['status' => $statusCode]
            )
            ->onlyMethods(['__construct'])
            ->getMock();

        $this->clientFactory->expects($this->once())
            ->method('create')
            ->willReturn($client);

        $client->expects($this->once())
            ->method('request')
            ->with("GET", $uriEndpoint, $params)
            ->willReturn($response);

        $this->assertEquals($response->getStatusCode(), $this->erpApiService->execute($params)->getStatusCode());
    }

    /**
     * @return array[]
     */
    public function requestInvalidArgumentsDataProvider(): array
    {
        $params = [
            'order_id' => OrderDataConsumerTest::ORDER_INCREMENT_ID,
            'customer_email' => OrderDataConsumerTest::CUSTOMER_EMAIL,
            'qty' => OrderDataConsumerTest::QTY_AMOUNT
        ];

        return [
            'success response' => [
                200,
                self::API_REQUEST_ENDPOINT,
                $params,
            ]
        ];
    }
}
